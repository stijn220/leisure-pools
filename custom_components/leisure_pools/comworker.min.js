/*
 version BUILD_VERSION, Copyright (c) 2014, Exor International SpA., http://www.jmobile.net
*/
'use strict';
(function(a, b) {
    "object" === typeof exports && "undefined" !== typeof module ? module.exports = b() : "function" === typeof define && define.amd ? define(b) : a.ES6Promise = b()
}
)(this, function() {
    function a() {
        return function() {
            return process.nextTick(f)
        }
    }
    function b() {
        return "undefined" !== typeof B ? function() {
            B(f)
        }
        : e()
    }
    function c() {
        var a = 0
          , b = new I(f)
          , c = document.createTextNode("");
        b.observe(c, {
            characterData: !0
        });
        return function() {
            c.data = a = ++a % 2
        }
    }
    function d() {
        var a = new MessageChannel;
        a.port1.onmessage = f;
        return function() {
            return a.port2.postMessage(0)
        }
    }
    function e() {
        var a = setTimeout;
        return function() {
            return a(f, 1)
        }
    }
    function f() {
        for (var a = 0; a < p; a += 2)
            (0,
            r[a])(r[a + 1]),
            r[a] = void 0,
            r[a + 1] = void 0;
        p = 0
    }
    function g() {
        try {
            var a = require("vertx");
            B = a.runOnLoop || a.runOnContext;
            return b()
        } catch (c) {
            return e()
        }
    }
    function l(a, b) {
        var c = arguments
          , d = this
          , e = new this.constructor(n);
        void 0 === e[z] && J(e);
        var f = d._state;
        f ? function() {
            var a = c[f - 1];
            q(function() {
                return K(f, e, a, d._result)
            })
        }() : C(d, e, a, b);
        return e
    }
    function D(a) {
        if (a && "object" === typeof a && a.constructor === this)
            return a;
        var b = new this(n);
        v(b, a);
        return b
    }
    function n() {}
    function L(a) {
        try {
            return a.then
        } catch (b) {
            return w.error = b,
            w
        }
    }
    function R(a, b, c, d) {
        try {
            a.call(b, c, d)
        } catch (e) {
            return e
        }
    }
    function S(a, b, c) {
        q(function(a) {
            var d = !1
              , e = R(c, b, function(c) {
                d || (d = !0,
                b !== c ? v(a, c) : m(a, c))
            }, function(b) {
                d || (d = !0,
                k(a, b))
            }, "Settle: " + (a._label || " unknown promise"));
            !d && e && (d = !0,
            k(a, e))
        }, a)
    }
    function T(a, b) {
        b._state === x ? m(a, b._result) : b._state === t ? k(a, b._result) : C(b, void 0, function(b) {
            return v(a, b)
        }, function(b) {
            return k(a, b)
        })
    }
    function M(a, b, c) {
        b.constructor === a.constructor && c === l && b.constructor.resolve === D ? T(a, b) : c === w ? (k(a, w.error),
        w.error = null) : void 0 === c ? m(a, b) : "function" === typeof c ? S(a, b, c) : m(a, b)
    }
    function v(a, b) {
        a === b ? k(a, new TypeError("You cannot resolve a promise with itself")) : "function" === typeof b || "object" === typeof b && null !== b ? M(a, b, L(b)) : m(a, b)
    }
    function U(a) {
        a._onerror && a._onerror(a._result);
        E(a)
    }
    function m(a, b) {
        a._state === u && (a._result = b,
        a._state = x,
        0 !== a._subscribers.length && q(E, a))
    }
    function k(a, b) {
        a._state === u && (a._state = t,
        a._result = b,
        q(U, a))
    }
    function C(a, b, c, d) {
        var e = a._subscribers
          , f = e.length;
        a._onerror = null;
        e[f] = b;
        e[f + x] = c;
        e[f + t] = d;
        0 === f && a._state && q(E, a)
    }
    function E(a) {
        var b = a._subscribers
          , c = a._state;
        if (0 !== b.length) {
            for (var d = void 0, e = void 0, f = a._result, g = 0; g < b.length; g += 3)
                d = b[g],
                e = b[g + c],
                d ? K(c, d, e, f) : e(f);
            a._subscribers.length = 0
        }
    }
    function N() {
        this.error = null
    }
    function K(a, b, c, d) {
        var e = "function" === typeof c
          , f = void 0
          , g = void 0
          , l = void 0
          , h = void 0;
        if (e) {
            try {
                f = c(d)
            } catch (n) {
                F.error = n,
                f = F
            }
            f === F ? (h = !0,
            g = f.error,
            f.error = null) : l = !0;
            if (b === f) {
                k(b, new TypeError("A promises callback cannot return that same promise."));
                return
            }
        } else
            f = d,
            l = !0;
        b._state === u && (e && l ? v(b, f) : h ? k(b, g) : a === x ? m(b, f) : a === t && k(b, f))
    }
    function V(a, b) {
        try {
            b(function(b) {
                v(a, b)
            }, function(b) {
                k(a, b)
            })
        } catch (c) {
            k(a, c)
        }
    }
    function J(a) {
        a[z] = O++;
        a._state = void 0;
        a._result = void 0;
        a._subscribers = []
    }
    function y(a, b) {
        this._instanceConstructor = a;
        this.promise = new a(n);
        this.promise[z] || J(this.promise);
        P(b) ? (this._input = b,
        this._remaining = this.length = b.length,
        this._result = Array(this.length),
        0 === this.length ? m(this.promise, this._result) : (this.length = this.length || 0,
        this._enumerate(),
        0 === this._remaining && m(this.promise, this._result))) : k(this.promise, Error("Array Methods must be provided an Array"))
    }
    function h(a) {
        this[z] = O++;
        this._result = this._state = void 0;
        this._subscribers = [];
        if (n !== a) {
            if ("function" !== typeof a)
                throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
            if (this instanceof h)
                V(this, a);
            else
                throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
        }
    }
    var G = void 0
      , P = G = Array.isArray ? Array.isArray : function(a) {
        return "[object Array]" === Object.prototype.toString.call(a)
    }
      , p = 0
      , B = void 0
      , H = void 0
      , q = function(a, b) {
        r[p] = a;
        r[p + 1] = b;
        p += 2;
        2 === p && (H ? H(f) : Q())
    }
      , A = (G = "undefined" !== typeof window ? window : void 0) || {}
      , I = A.MutationObserver || A.WebKitMutationObserver
      , A = "undefined" === typeof self && "undefined" !== typeof process && "[object process]" === {}.toString.call(process)
      , W = "undefined" !== typeof Uint8ClampedArray && "undefined" !== typeof importScripts && "undefined" !== typeof MessageChannel
      , r = Array(1E3)
      , Q = void 0
      , Q = A ? a() : I ? c() : W ? d() : void 0 === G && "function" === typeof require ? g() : e()
      , z = Math.random().toString(36).substring(16)
      , u = void 0
      , x = 1
      , t = 2
      , w = new N
      , F = new N
      , O = 0;
    y.prototype._enumerate = function() {
        for (var a = this.length, b = this._input, c = 0; this._state === u && c < a; c++)
            this._eachEntry(b[c], c)
    }
    ;
    y.prototype._eachEntry = function(a, b) {
        var c = this._instanceConstructor
          , d = c.resolve;
        d === D ? (d = L(a),
        d === l && a._state !== u ? this._settledAt(a._state, b, a._result) : "function" !== typeof d ? (this._remaining--,
        this._result[b] = a) : c === h ? (c = new c(n),
        M(c, a, d),
        this._willSettleAt(c, b)) : this._willSettleAt(new c(function(b) {
            return b(a)
        }
        ), b)) : this._willSettleAt(d(a), b)
    }
    ;
    y.prototype._settledAt = function(a, b, c) {
        var d = this.promise;
        d._state === u && (this._remaining--,
        a === t ? k(d, c) : this._result[b] = c);
        0 === this._remaining && m(d, this._result)
    }
    ;
    y.prototype._willSettleAt = function(a, b) {
        var c = this;
        C(a, void 0, function(a) {
            return c._settledAt(x, b, a)
        }, function(a) {
            return c._settledAt(t, b, a)
        })
    }
    ;
    h.all = function(a) {
        return (new y(this,a)).promise
    }
    ;
    h.race = function(a) {
        var b = this;
        return P(a) ? new b(function(c, d) {
            for (var e = a.length, f = 0; f < e; f++)
                b.resolve(a[f]).then(c, d)
        }
        ) : new b(function(a, b) {
            return b(new TypeError("You must pass an array to race."))
        }
        )
    }
    ;
    h.resolve = D;
    h.reject = function(a) {
        var b = new this(n);
        k(b, a);
        return b
    }
    ;
    h._setScheduler = function(a) {
        H = a
    }
    ;
    h._setAsap = function(a) {
        q = a
    }
    ;
    h._asap = q;
    h.prototype = {
        constructor: h,
        then: l,
        "catch": function(a) {
            return this.then(null, a)
        }
    };
    h.polyfill = function() {
        var a = void 0;
        if ("undefined" !== typeof global)
            a = global;
        else if ("undefined" !== typeof self)
            a = self;
        else
            try {
                a = Function("return this")()
            } catch (b) {
                throw Error("polyfill failed because global object is unavailable in this environment");
            }
        var c = a.Promise;
        if (c) {
            var d = null;
            try {
                d = Object.prototype.toString.call(c.resolve())
            } catch (e) {}
            if ("[object Promise]" === d && !c.cast)
                return
        }
        a.Promise = h
    }
    ;
    h.Promise = h;
    h.polyfill();
    return h
});
var getXHRParameters = function(a) {
    var b = {
        type: a.type,
        url: a.url,
        async: !1 === a.asycn ? !1 : !0,
        search: ""
    }
      , c = a.data;
    if (c && "string" == typeof c)
        b.search = c;
    else if (c && "object" == typeof c) {
        var d = [], e;
        for (e in c)
            d.push(encodeURIComponent(e) + "=" + encodeURIComponent(c[e]));
        b.search = d.join("&")
    }
    b.search = a.nocache ? "" == b.search ? b.search + "nocache=1" : b.search + "&nocache=1" : "" == b.search ? b.search + (new Date).getTime() : b.search + ("&" + (new Date).getTime());
    b.type = void 0 === b.type ? "GET" : b.type;
    a = "";
    "GET" === b.type && b.search && (a = -1 != b.url.indexOf("?") ? "&" + b.search : "?" + b.search);
    b.url += a;
    return b
}
  , ajax = function(a, b) {
    var c = new XMLHttpRequest;
    if (a.headers)
        for (var d in a.headers)
            c.setRequestHeader(d, a.headers[d]);
    d = getXHRParameters(a);
    c.open(d.type, d.url, d.async);
    a.async && (c.timeout = "4000");
    b && (c.onload = function() {
        200 <= c.status && 400 > c.status ? "function" == typeof b.success && b.success(c.responseText) : "function" == typeof b.fail && b.fail(c.responseText);
        "function" == typeof b.always && b.always(c.responseText);
        c.abort()
    }
    ,
    c.ontimeout = function() {
        "function" == typeof b.fail && b.fail(c.responseText);
        "function" == typeof b.always && b.always(c.responseText);
        c.abort()
    }
    ,
    c.onerror = function() {
        "function" == typeof b.fail && b.fail(c.responseText);
        "function" == typeof b.always && b.always(c.responseText);
        c.abort()
    }
    );
    "GET" === d.type ? c.send() : c.send(d.search)
}
  , request = function(a) {
    return new Promise(function(b, c) {
        var d = new XMLHttpRequest;
        if (a.headers)
            for (var e in a.headers)
                xhr.setRequestHeader(e, a.headers[e]);
        e = getXHRParameters(a);
        d.open(e.type, e.url, e.async);
        a.async && (d.timeout = "4000");
        d.onload = function() {
            200 <= d.status && 400 > d.status ? b(d.responseText) : c(d.responseText);
            d.abort()
        }
        ;
        d.ontimeout = function() {
            c(d.responseText);
            d.abort()
        }
        ;
        d.onerror = function() {
            c(d.responseText);
            d.abort()
        }
        ;
        "GET" === e.type ? d.send() : d.send(e.search)
    }
    )
}
  , $request = request;
function $requestSync(a) {
    var b = new XMLHttpRequest;
    if (a.headers)
        for (var c in a.headers)
            xhr.setRequestHeader(c, a.headers[c]);
    a.asycn = !1;
    a = getXHRParameters(a);
    b.open(a.type, a.url, a.async);
    var d, e, f = !1;
    b.onload = function() {
        d = b.status;
        e = b.responseText
    }
    ;
    b.ontimeout = function() {
        d = b.status;
        e = b.responseText;
        f = !0
    }
    ;
    b.onerror = function() {
        d = b.status;
        e = b.responseText
    }
    ;
    "GET" === a.type ? b.send() : b.send(a.search);
    return {
        status: d,
        data: e,
        timeout: f
    }
}
function PollingManager(a, b) {
    this.url = a;
    isNaN(b) || (this.counter = b)
}
PollingManager.prototype.requests = {};
PollingManager.prototype.counter = 1;
PollingManager.prototype.queue = [];
PollingManager.prototype.addRequest = function(a, b, c, d, e) {
    this.requests[a] && this.requests[a].enable || (this.requests[a] = {
        enable: !0,
        timer: 0,
        rate: d,
        params: c
    },
    this._pollingLoop(a, b, e))
}
;
PollingManager.prototype.setRate = function(a, b) {
    this.requests && this.requests[a] && (this.requests[a].rate = b)
}
;
PollingManager.prototype._pollingLoop = function(a, b, c) {
    var d = this;
    if (this.requests[a].enable) {
        var e = this.requests[a].rate
          , f = this.requests[a].params;
        0 == this.counter ? -1 == this.queue.indexOf(a) && (d.requests[a].timer = setTimeout(function() {
            var e = d.queue.indexOf(a);
            d.queue.splice(e, 1);
            d._pollingLoop(a, b, c)
        }, 250)) : (this.counter--,
        b(this.url, f, {
            success: function(f) {
                d.counter++;
                d.requests[a].enable && ("string" != typeof f && (f = JSON.stringify(f)),
                worker.postMessage({
                    e: c,
                    data: '{"id":"' + a + '","data":' + f + "}"
                }),
                d.requests[a].timer = setTimeout(function() {
                    d._pollingLoop(a, b, c)
                }, e))
            },
            fail: function() {
                d.counter++;
                d.requests[a].timer = setTimeout(function() {
                    d.requests[a].timer = d._pollingLoop(a, b, c)
                }, e)
            }
        }))
    }
}
;
PollingManager.prototype.removeRequest = function(a) {
    this.requests[a] && (this.requests[a].enable = !1,
    clearTimeout(this.requests[a].timer))
}
;
var window = this
  , global = this
  , worker = this
  , ese = null
  , isIE11 = !!window.MSInputMethodContext && !!document.documentMode;
if (isIE11) {
    var body = document.getElementsByTagName("body")[0]
      , script = document.createElement("script");
    script.type = "text/javascript";
    script.src = "../js/eventsource.min.js";
    body.appendChild(script);
    worker = self
} else
    global.EventSource || importScripts("../js/eventsource.min.js");
function CommunicationWorker(a) {
    this.clientId = this._generateSSEId();
    this.url = a.url;
    this.sseRoute = a.url + "/cgi/sse";
    this.minPeriod = a.pollRate;
    this.maxBandwidth = a.maxBandwidth;
    this.defaultRequestType = "POST";
    this.mapTags = {};
    this.arrayTags = [];
    this.mapAlarms = {};
    this.arrayAlarms = [];
    this.pollMgr = new PollingManager(this.url,2);
    this.timer = null;
    this.delay = a.ttl;
    this.projectFullName = null;
    this.mode = 0;
    this.datastream = this.isKeepConnectionAliveEnable = !1;
    void 0 != a.connectionMode && (this.connectionMode = a.connectionMode,
    2 == a.connectionMode && (this.longPollTimeout = 100));
    a = this.sseRoute + "?id=" + this.clientId + "&minPeriod=" + this.minPeriod;
    -1 != navigator.userAgent.indexOf("WebKit/534") && (a += "&maxSize=2097152");
    0 != this.maxBandwidth && (a += "&maxBandwidth=" + this.maxBandwidth);
    1E3 <= this.minPeriod ? this.dataRate = 500 : 100 < this.minPeriod && 1E3 > this.minPeriod ? this.dataRate = parseInt(this.minPeriod / 2) : 100 >= this.minPeriod && (this.dataRate = 50);
    this.request = a;
    this.openConnection()
}
CommunicationWorker.prototype.status = {
    E_FAIL: 0,
    S_OK: 1,
    E_INVALIDARG: -2,
    E_NO_SESSION_EXIST: -3,
    E_NEED_LOGIN: -4,
    E_UNKNOWNGROUP: -5,
    E_INACTIVEGROUP: -6,
    E_PROPERTY_NOT_MAPPED: -7,
    E_RESOURCE_LOCATOR_NOT_FOUND: -8,
    E_CONFIG_FILE_NOT_FOUND: -9,
    E_INVALID_PROPERTY: -10,
    E_READ_FORBIDDEN: -11,
    E_INACTIVETAG: -12,
    E_NOT_BINDED_TO_PROTOCOL: -13,
    E_UNKNOWNTAG: -14,
    E_TIMEOUT: -15,
    E_INIT: -16,
    E_WRITE_FORBIDDEN: -18
};
CommunicationWorker.prototype.connectionMode = 0;
CommunicationWorker.prototype.longPollTimeout = 4E3;
CommunicationWorker.prototype.doRequest = request;
CommunicationWorker.prototype.openConnection = function() {
    var a, b, c = this;
    this.source = new EventSource(this.request);
    var d = this.connectionMode;
    if (0 == d || 1 == d)
        a = setInterval(function() {
            1 == c.source.readyState && (0 == c.mode ? (worker.postMessage({
                e: "ready",
                data: {
                    mode: 0
                }
            }),
            c.datastream = !0,
            clearInterval(a),
            clearInterval(b)) : 1 == c.mode && clearInterval(a))
        }, 100);
    if (0 == d || 2 == d)
        b = setTimeout(function() {
            if (0 == c.source.readyState || 2 == d)
                clearInterval(a),
                c.source.close(),
                c.clientId = c._generateSSEId(),
                c.request = c.sseRoute + "?id=" + c.clientId + "&minPeriod=1000",
                c.request += "&maxSize=4",
                c.source = new EventSource(c.request),
                c.mode = 1,
                worker.postMessage({
                    e: "ready",
                    data: {
                        mode: 1
                    }
                }),
                c.datastream = !0
        }, this.longPollTimeout)
}
;
CommunicationWorker.prototype.resetSSEConnection = function() {
    0 == this.mode && (this.source.close(),
    this.openConnection())
}
;
CommunicationWorker.prototype._generateSSEId = function() {
    return (new Date).getTime() + "" + Math.floor(1E3 * Math.random())
}
;
CommunicationWorker.prototype.start = function() {
    this.addTagListener();
    this.addAlarmsListener();
    this.sendData()
}
;
CommunicationWorker.prototype.sendData = function() {
    0 < this.arrayTags.length && (worker.postMessage({
        e: "tags",
        data: this.arrayTags
    }),
    this.arrayTags = [],
    this.mapTags = {});
    0 < this.arrayAlarms.length && (worker.postMessage({
        e: "alarms",
        data: this.arrayAlarms
    }),
    this.arrayAlarms = [],
    this.mapAlarms = []);
    var a = this;
    setTimeout(function() {
        a.sendData()
    }, parseInt(this.dataRate))
}
;
CommunicationWorker.prototype._generateRequest = function(a, b, c) {
    for (var d = "", e = b.length, f = 0; f < e; f++)
        d = c ? d + ("&" + a + f + "=" + encodeURIComponent(b[f])) : d + ("&_" + a + f + "=" + encodeURIComponent(b[f]));
    return c ? "n" + a + "=" + e + d : "_n" + a + "=" + e + d
}
;
CommunicationWorker.prototype.addTagListener = function() {
    var a = this;
    this.source.addEventListener("tags", function(b) {
        try {
            b = JSON.parse(b.data);
            for (var c = 0, d = b.length; c < d; c++) {
                var e = a.mapTags[b[c].n];
                if (void 0 != e)
                    a.arrayTags[e] = b[c];
                else {
                    var f = a.arrayTags.push(b[c]);
                    a.mapTags[b[c].n] = f - 1
                }
            }
        } catch (g) {}
    }, !1)
}
;
CommunicationWorker.prototype.addAlarmsListener = function() {
    var a = this;
    this.source.addEventListener("alarms", function(b) {
        b = JSON.parse(b.data);
        for (var c = 0, d = b.length; c < d; c++) {
            var e = b[c]
              , f = e.v.ts.replace("T", " ").split(" ")
              , g = f[0].replace(/-/g, "/")
              , f = f[1].substring(0, 8);
            e.v.dtt = g + " " + f;
            e.v.dt = g;
            e.v.tm = f;
            g = a.mapAlarms[e.n];
            void 0 != g ? a.arrayAlarms[g] = e : (g = a.arrayAlarms.push(e),
            a.mapAlarms[e.n] = g - 1)
        }
    }, !1)
}
;
CommunicationWorker.prototype.subscribeGroups = function(a) {
    a = this._generateRequest("g", a, !0);
    this.sendSSEReq(a)
}
;
CommunicationWorker.prototype.subscribeTags = function(a) {
    a = this._generateRequest("t", a, !0);
    this.sendSSEReq(a)
}
;
CommunicationWorker.prototype.unsubscribeTags = function(a) {
    a = this._generateRequest("t", a, !1);
    this.sendSSEReq(a)
}
;
CommunicationWorker.prototype.resetChannel = function() {
    this.datastream && (this.datastream = !1,
    this.resetSSEConnection())
}
;
CommunicationWorker.prototype.sendSSEReq = function(a) {
    var b = this;
    !this.source || 0 == this.source.readyState && 1 == !this.mode ? setTimeout(function() {
        b.sendSSEReq(a)
    }, 500) : this.ajax({
        type: "GET",
        url: this.sseRoute,
        data: "id=" + this.clientId + "&" + a
    }, {
        fail: function() {
            b.resetChannel()
        }
    })
}
;
CommunicationWorker.prototype.unsubscribeGroups = function(a) {
    a = this._generateRequest("g", a, !1);
    var b = this;
    this.ajax({
        type: "GET",
        url: this.sseRoute,
        data: "id=" + this.clientId + "&" + a
    }, {
        fail: function() {
            b.resetChannel()
        }
    })
}
;
CommunicationWorker.prototype.subscribeAlarms = function(a) {
    var b = "na=*";
    "*" != a && (b = this._generateRequest("a", a, !0));
    this.ajax({
        type: "GET",
        url: this.sseRoute,
        data: "id=" + this.clientId + "&" + b
    });
    return "*"
}
;
CommunicationWorker.prototype.addEventBufferListener = function(a, b) {
    var c = this;
    this.pollMgr.addRequest(a, function(a, b, f) {
        c.readEvent(a, b, f)
    }, b, 1500, "events")
}
;
CommunicationWorker.prototype.removeEventBufferListener = function(a) {
    this.pollMgr.removeRequest(a)
}
;
CommunicationWorker.prototype.readEvent = function(a, b, c) {
    ajax({
        type: "GET",
        url: a + "/cgi/readEvent.json",
        data: b
    }, {
        success: function(a) {
            c.success(a)
        },
        fail: function(a) {
            c.fail(a)
        }
    })
}
;
CommunicationWorker.prototype.ajax = ajax;
CommunicationWorker.prototype.keepConnectionAlive = function() {
    this.isKeepConnectionAliveEnable || (this._startPolling(),
    this.isKeepConnectionAliveEnable = !0)
}
;
CommunicationWorker.prototype._startPolling = function() {
    var a = this;
    clearInterval(this.timer);
    this.timer = setInterval(function() {
        a._getActiveProject()
    }, this.delay)
}
;
CommunicationWorker.prototype._stopPolling = function() {
    this.timer && clearInterval(this.timer)
}
;
CommunicationWorker.prototype.getProperty = function(a, b, c) {
    this.ajax({
        type: "GET",
        url: this.url + "/cgi/getProperties",
        data: "n=1&it1=" + a,
        nocache: !0
    }, {
        success: function(a) {
            a = a.split("\t");
            var b = a[1].trim();
            a = {
                name: a[0],
                value: a[2],
                code: CommunicationWorker.prototype.status[b]
            };
            "function" == typeof c.success && c.success(a);
            "function" == typeof c.always && c.always(a)
        },
        fail: function(a) {
            var b = {};
            b.code = a ? CommunicationWorker.prototype.status[a.trim().replace("#", "")] : CommunicationWorker.prototype.status.E_FAIL;
            "function" == typeof c.fail && c.fail(b);
            "function" == typeof c.always && c.always(b)
        }
    })
}
;
CommunicationWorker.prototype._getActiveProject = function() {
    var a = this;
    this.getProperty("projectName", !1, {
        always: function(b) {
            var c;
            "undefined" != typeof b.value && (c = b.value.toLowerCase());
            b.code == CommunicationWorker.prototype.status.E_PROPERTY_NOT_MAPPED ? (worker.postMessage({
                e: "connection",
                data: {
                    status: 1,
                    prjName: "_SIMULATOR_"
                }
            }),
            a.newConnection = !1) : b.code == CommunicationWorker.prototype.status.E_FAIL ? (worker.postMessage({
                e: "connection",
                data: {
                    status: 0
                }
            }),
            a.newConnection = !1) : b.code == CommunicationWorker.prototype.status.E_NEED_LOGIN ? (worker.postMessage({
                e: "connection",
                data: {
                    status: 2
                }
            }),
            a.newConnection = !1) : b.code == CommunicationWorker.prototype.status.S_OK && (worker.postMessage({
                e: "connection",
                data: {
                    status: 1,
                    prjName: c
                }
            }),
            a.newConnection = !1)
        }
    })
}
;
CommunicationWorker.prototype.activateTag = function(a, b, c) {
    return this.doRequest({
        type: "GET",
        url: this.url + "/cgi/" + (b ? "" : "de") + "activateTags",
        data: "n=1&t1=" + a,
        async: c
    })
}
;
CommunicationWorker.prototype.readTag = function(a, b, c) {
    var d = this.url + "/cgi/readTags.json"
      , e = "returnType=true&returnTS=true&n=1&t1=" + encodeURIComponent(b) + "." + c + "&nocache=1"
      , f = this;
    this.activateTag(b, !0, !0).then(function(c) {
        f.doRequest({
            type: "GET",
            url: d,
            data: e
        }).then(function(b) {
            worker.postMessage({
                e: "API",
                id: a,
                data: b
            })
        }).catch(function(b) {
            worker.postMessage({
                e: "API",
                id: a,
                err: b
            })
        });
        f.activateTag(b, !1, !0)
    }).catch(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            err: b
        })
    })
}
;
CommunicationWorker.prototype.writeTag = function(a, b, c, d, e) {
    b = "n=1&t1=" + encodeURIComponent(b) + "." + c + "&v1=" + encodeURIComponent(d) + "&nocache=1";
    this.doRequest({
        type: "GET",
        url: this.url + "/cgi/writeTags.json",
        data: b,
        timeout: 3E4,
        async: !e
    }).then(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            data: b
        })
    }).catch(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            err: b
        })
    })
}
;
CommunicationWorker.prototype.getTime = function(a) {
    this.doRequest({
        type: "GET",
        url: this.url + "/cgi/getTime?nocache=1"
    }).then(function(b) {
        b = b.split("\n");
        var c = {};
        "#S_OK" == b[0] ? (c.status = b[0],
        c.time = 1E3 * parseFloat(b[1])) : c.status = b[0];
        worker.postMessage({
            e: "API",
            id: a,
            data: c
        })
    }).catch(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            err: b
        })
    })
}
;
CommunicationWorker.prototype.getPrecachedPages = function(a, b) {
    this.doRequest({
        type: "GET",
        url: b,
        cache: !1
    }).then(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            data: b
        })
    }).catch(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            err: b
        })
    })
}
;
CommunicationWorker.formatTagOperationRequest = function(a) {
    var b = Array(a.length + 1);
    b[0] = "n=" + a.length;
    return a.reduce(function(a, b, e) {
        e += 1;
        a[e] = "t" + e + "=" + b.name;
        void 0 !== b.arrayIndex && (a[e] += "." + b.arrayIndex);
        b = b.params;
        for (var f in b)
            a[e] += "&" + f + e + "=" + b[f];
        return a
    }, b).join("&")
}
;
CommunicationWorker.prototype.stepTags = function(a, b) {
    var c = CommunicationWorker.formatTagOperationRequest(b);
    this.doRequest({
        type: this.defaultRequestType,
        url: this.url + "/cgi/stepTags.json",
        data: c,
        timeout: 3E4,
        async: !0
    }).then(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            data: b
        })
    }).catch(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            err: b
        })
    })
}
;
CommunicationWorker.prototype.toggleBitTags = function(a, b) {
    var c = CommunicationWorker.formatTagOperationRequest(b);
    this.doRequest({
        type: this.defaultRequestType,
        url: this.url + "/cgi/toggleBitTags.json",
        data: c,
        timeout: 3E4,
        async: !0
    }).then(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            data: b
        })
    }).catch(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            err: b
        })
    })
}
;
CommunicationWorker.prototype.setBitTags = function(a, b) {
    var c = CommunicationWorker.formatTagOperationRequest(b);
    this.doRequest({
        type: this.defaultRequestType,
        url: this.url + "/cgi/setBitTags.json",
        data: c,
        timeout: 3E4,
        async: !0
    }).then(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            data: b
        })
    }).catch(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            err: b
        })
    })
}
;
CommunicationWorker.prototype.resetBitTags = function(a, b) {
    var c = CommunicationWorker.formatTagOperationRequest(b);
    this.doRequest({
        type: this.defaultRequestType,
        url: this.url + "/cgi/resetBitTags.json",
        data: c,
        timeout: 3E4,
        async: !0
    }).then(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            data: b
        })
    }).catch(function(b) {
        worker.postMessage({
            e: "API",
            id: a,
            err: b
        })
    })
}
;
CommunicationWorker.prototype.getRecipeParams = function(a, b, c) {
    this.ajax({
        type: "GET",
        url: a + "/cgi/getRecipeParams.json",
        data: "rc=" + b.n + b.flags
    }, {
        success: function(a) {
            c.success(a)
        },
        fail: function() {
            c.fail()
        }
    })
}
;
CommunicationWorker.prototype.getRecipeSets = function(a, b, c) {
    var d;
    0 == b.p && (d = "&getname=true&getvalue=true");
    this.ajax({
        type: "GET",
        url: a + "/cgi/getRecipeSetsParams.json",
        data: "rc=" + b.n + "&st=" + b.s + d
    }, {
        success: function(a) {
            c.success(a)
        },
        fail: function() {
            c.fail()
        }
    })
}
;
CommunicationWorker.prototype.getRecipeElems = function(a, b, c) {
    var d;
    0 == b.p && (d = "&getname=true&getvalue=true&getelems=true");
    this.ajax({
        type: "GET",
        url: a + "/cgi/getRecipeSetsParams.json",
        data: "rc=" + b.n + "&st=" + b.s + "&i=" + b.i + d
    }, {
        success: function(a) {
            c.success(a)
        },
        fail: function() {
            c.fail()
        }
    })
}
;
CommunicationWorker.prototype.unsubscribeRecipe = function(a) {
    this.pollMgr.removeRequest(a)
}
;
CommunicationWorker.prototype.unsubscribeRecipeSetList = function(a) {
    this.pollMgr.removeRequest(a + ".RecipeSetList")
}
;
CommunicationWorker.prototype.unsubscribeRecipeSet = function(a, b) {
    this.pollMgr.removeRequest(a + "." + b)
}
;
CommunicationWorker.prototype.unsubscribeRecipeSetElem = function(a, b, c) {
    this.pollMgr.removeRequest(a + "." + b + "." + c)
}
;
CommunicationWorker.prototype.subscribeRecipe = function(a) {
    var b = {
        n: a,
        flags: "&getid=true&getstatus=true&getsetlist=true"
    };
    "curRecipe" == a && (b.flags = "&getid=true&getlastdwnset=true&getselset=true&getstatus=true&getsetlist=true&getrclist=true");
    var c = this;
    this.pollMgr.addRequest(a, function(a, b, f) {
        c.getRecipeParams(a, b, f)
    }, b, 1500, "recipe")
}
;
CommunicationWorker.prototype._getRecipePollTime = function() {
    return Math.round(1200 + 300 * Math.random())
}
;
CommunicationWorker.prototype.subscribeRecipeSetList = function(a) {
    var b = this;
    this.pollMgr.addRequest(a + ".RecipeSetList", function(a, d, e) {
        b.getRecipeParams(a, d, e)
    }, {
        n: a,
        flags: "&getid=true&getsetlist=true"
    }, this._getRecipePollTime(), "recipe")
}
;
CommunicationWorker.prototype.subscribeRecipeSet = function(a, b) {
    var c = this;
    this.pollMgr.addRequest(a + "." + b, function(a, b, f) {
        c.getRecipeSets(a, b, f)
    }, {
        n: a,
        s: b,
        p: 0
    }, this._getRecipePollTime(), "recipe")
}
;
CommunicationWorker.prototype.subscribeRecipeSetElem = function(a, b, c) {
    var d = this;
    this.pollMgr.addRequest(a + "." + b + "." + c, function(a, b, c) {
        d.getRecipeElems(a, b, c)
    }, {
        n: a,
        s: b,
        i: c,
        p: 0
    }, this._getRecipePollTime(), "recipe")
}
;
CommunicationWorker.prototype.setRecipeRate = function(a) {
    this.pollMgr.setRate("curRecipe", a)
}
;
var WORKER_MSG_CODE = {
    INIT: 0,
    START: 1,
    SBSGROUP: 2,
    USBSGROUP: 3,
    GETDATA: 4,
    SBSALARMS: 5,
    ADDEVTBUFFLST: 6,
    RMEVTBUFFLST: 7,
    SBSTAGS: 8,
    ALIVE: 9,
    RSTSSE: 10,
    SBSRCP: 11,
    SBSRCPSET: 12,
    SBSRCPSETEL: 13,
    SBSRCPLST: 14,
    RCPRATE: 15,
    SBSTRENDDATA: 16,
    UPTRENDDATA: 17,
    USBSTRENDDATA: 18,
    USBSTAGS: 19,
    READTAG: 20,
    WRITETAG: 21,
    GETTIME: 22,
    GETPRECACHE: 23,
    STEPTAG: 24,
    TOGGLEBIT: 25,
    SETBIT: 26,
    RESETBIT: 27,
    READSUBTRENDS: 28
};
worker.addEventListener("message", function(a) {
    a = a.data;
    switch (a.c) {
    case WORKER_MSG_CODE.INIT:
        ese = new CommunicationWorker({
            url: a.url,
            pollRate: a.pollRate,
            ttl: a.ttl,
            maxBandwidth: a.maxBandwidth,
            connectionMode: a.connectionMode
        });
        break;
    case WORKER_MSG_CODE.START:
        ese.start();
        break;
    case WORKER_MSG_CODE.SBSGROUP:
        ese.subscribeGroups(a.groups);
        break;
    case WORKER_MSG_CODE.USBSGROUP:
        ese.unsubscribeGroups(a.groups);
        break;
    case WORKER_MSG_CODE.GETDATA:
        null != ese && ese.getData();
        break;
    case WORKER_MSG_CODE.SBSALARMS:
        ese.subscribeAlarms(a.alarms);
        break;
    case WORKER_MSG_CODE.ADDEVTBUFFLST:
        ese.addEventBufferListener(a.id, a.request);
        break;
    case WORKER_MSG_CODE.RMEVTBUFFLST:
        ese.removeEventBufferListener(a.id);
        break;
    case WORKER_MSG_CODE.SBSTAGS:
        ese.subscribeTags(a.tags);
        break;
    case WORKER_MSG_CODE.ALIVE:
        ese.keepConnectionAlive();
        break;
    case WORKER_MSG_CODE.RSTSSE:
        ese.resetSSEConnection();
        break;
    case WORKER_MSG_CODE.SBSRCP:
        a.en ? ese.subscribeRecipe(a.rc) : ese.unsubscribeRecipe(a.rc);
        break;
    case WORKER_MSG_CODE.SBSRCPSET:
        a.en ? ese.subscribeRecipeSet(a.rc, a.st) : ese.unsubscribeRecipeSet(a.rc, a.st);
        break;
    case WORKER_MSG_CODE.SBSRCPSETEL:
        a.en ? ese.subscribeRecipeSetElem(a.rc, a.set, a.el) : ese.unsubscribeRecipeSetElem(a.rc, a.set, a.el);
        break;
    case WORKER_MSG_CODE.SBSRCPLST:
        a.en ? ese.subscribeRecipeSetList(a.rc) : ese.unsubscribeRecipeSetList(a.rc);
        break;
    case WORKER_MSG_CODE.RCPRATE:
        ese.setRecipeRate(a.r);
        break;
    case WORKER_MSG_CODE.SBSTRENDDATA:
        ese.subscribeTrend(a.id, a.trendName, a.start, a.end, a.maxSamp, a.delta);
        break;
    case WORKER_MSG_CODE.UPTRENDDATA:
        ese.updateTrendSubscription(a.id, a.trendName, a.start, a.end, a.maxSamp, a.delta);
        break;
    case WORKER_MSG_CODE.USBSTRENDDATA:
        ese.unsubscribeTrend(a.id);
        break;
    case WORKER_MSG_CODE.USBSTAGS:
        ese.unsubscribeTags(a.tags);
        break;
    case WORKER_MSG_CODE.READTAG:
        ese.readTag(a.id, a.tagName, a.index);
        break;
    case WORKER_MSG_CODE.WRITETAG:
        ese.writeTag(a.id, a.name, a.index, a.value, a.sync);
        break;
    case WORKER_MSG_CODE.GETTIME:
        ese.getTime(a.id);
        break;
    case WORKER_MSG_CODE.GETPRECACHE:
        ese.getPrecachedPages(a.id, a.url);
        break;
    case WORKER_MSG_CODE.TOGGLEBIT:
        ese.toggleBitTags(a.id, a.params);
        break;
    case WORKER_MSG_CODE.SETBIT:
        ese.setBitTags(a.id, a.params);
        break;
    case WORKER_MSG_CODE.RESETBIT:
        ese.resetBitTags(a.id, a.params);
        break;
    case WORKER_MSG_CODE.STEPTAG:
        ese.stepTags(a.id, a.params);
        break;
    case WORKER_MSG_CODE.READSUBTRENDS:
        ese.readSubTrends(a.id, a.trendName, a.start, a.end, a.maxSamp, a.delta, a.bounds)
    }
}, !1);
CommunicationWorker.prototype.trendLock = !1;
CommunicationWorker.prototype.enabledTrendReq = !1;
CommunicationWorker.prototype.trendTimers = {};
CommunicationWorker.prototype.trendBuffers = {};
CommunicationWorker.prototype.trendPollTime = 4E3;
CommunicationWorker.prototype.subscribeTrend = function(a, b, c, d, e, f) {
    this.enabledTrendReq = !0;
    this.trendBuffers[a] = {
        wgtId: a,
        hStartTime: c,
        hEndTime: d,
        hTrendName: b,
        deltaTime: e,
        hMaxNSamples: f,
        status: !0
    };
    this.startTrendPolling(this.trendBuffers[a])
}
;
CommunicationWorker.prototype.updateTrendSubscription = function(a, b, c, d, e, f) {
    if (a = this.trendBuffers[a])
        a.hStartTime = c,
        a.hEndTime = d,
        a.hTrendName = b,
        a.deltaTime = f,
        a.hMaxNSamples = e,
        a.status ? this.requestTrend(a, !1) : this.requestTrend(a, !0)
}
;
CommunicationWorker.prototype.startTrendPolling = function(a) {
    var b = this;
    this.enabledTrendReq && (this.trendLock ? this.trendTimers[a.wgtId] = setTimeout(function() {
        null !== b.trendTimers[a.wgtId] && b.startTrendPolling(a)
    }, 500) : (this.trendLock = !0,
    this.requestTrend(a, !0)))
}
;
CommunicationWorker.prototype.requestTrend = function(a, b) {
    var c = this
      , d = a.hStartTime
      , e = a.hEndTime
      , f = a.hTrendName
      , g = 3 * a.hMaxNSamples
      , l = e - d;
    d >= e ? (this.trendLock = !1,
    a.status = !1) : (d -= l,
    e += l,
    l = Math.round((e - d) / g),
    this.readTrend(f, e, d, g, l, {
        success: function(d) {
            c.trendLock = !1;
            if (c.enabledTrendReq) {
                var e = c.trendPollTime;
                "S_OK" == d.c && 0 < d.d.length && worker.postMessage({
                    e: "trend",
                    id: a.wgtId,
                    data: d.d
                });
                b && (c.trendTimers[a.wgtId] = setTimeout(function() {
                    c.startTrendPolling(a)
                }, e))
            }
        },
        fail: function(d) {
            c.trendLock = !1;
            b && (c.trendTimers[a.wgtId] = setTimeout(function() {
                c.startTrendPolling(a)
            }, c.trendPollTime))
        }
    }))
}
;
CommunicationWorker.prototype.unsubscribeTrend = function(a) {
    clearTimeout(this.trendTimers[a]);
    this.trendTimers[a] = null;
    delete this.trendBuffers[a];
    a = !0;
    for (var b in this.trendBuffers)
        a = !1;
    a && (this.enabledTrendReq = !1)
}
;
CommunicationWorker.prototype.readSubTrends = function(a, b, c, d, e, f, g) {
    b = "tr=" + encodeURIComponent(b) + "&returnTS=true&returnRT=false&startTime=" + c + "&endTime=" + d;
    b = b + (e ? "&nSamples=" + e : "&nSamples=0") + (f ? "&deltaTime=" + f : "&deltaTime=0");
    b += g ? "&bounds=" + g : "&bounds=false";
    this.ajax({
        type: "POST",
        url: this.url + "/cgi/readTrend.json",
        data: b
    }, {
        success: function(b) {
            b = JSON.parse(b);
            for (var c = [], d = 0; d < b.length; d++) {
                var e = b[d].code
                  , f = []
                  , g = b[d].n;
                if ("S_OK" === e || "S_MOREDATA" === e)
                    f = b[d].d;
                c.push({
                    n: g,
                    c: e,
                    d: f
                })
            }
            worker.postMessage({
                e: "subTrends",
                id: a,
                data: c
            })
        }
    })
}
;
CommunicationWorker.prototype.readTrend = function(a, b, c, d, e, f) {
    a = "tr=" + encodeURIComponent(a) + "&returnTS=true&returnRT=false&startTime=" + b + "&endTime=" + c;
    a = d ? a + ("&nSamples=" + d) : a + "&nSamples=0";
    a = (e ? a + ("&deltaTime=" + e) : a + "&deltaTime=0") + "&bounds=true";
    this.ajax({
        type: "POST",
        url: this.url + "/cgi/readTrend.json",
        data: a
    }, {
        success: function(a) {
            a = JSON.parse(a);
            var b = {
                c: a.code
            };
            if ("S_OK" == a.code || "S_MOREDATA" == a.code)
                b.d = a.d;
            "function" == typeof f.success && f.success(b);
            "function" == typeof f.always && f.always(b)
        },
        fail: function(a) {
            var b = {};
            b.code = a ? CommunicationWorker.prototype.status[a.trim().replace("#", "")] : CommunicationWorker.prototype.status.E_FAIL;
            "function" == typeof f.fail && f.fail(b);
            "function" == typeof f.always && f.always(b)
        }
    })
}
;
worker.postMessage({
    e: "bootstrap"
});